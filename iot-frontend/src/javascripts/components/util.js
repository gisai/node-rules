import PropTypes from 'prop-types';

const basic = {
  _id: PropTypes.string,
  url: PropTypes.string,
  createdAt: PropTypes.string,
  updatedAt: PropTypes.string,
};

export const Shapes = {
  data: PropTypes.shape({
    users: PropTypes.shape({
      ...basic,
      admin: PropTypes.bool,
      name: PropTypes.string,
    }),
    screens: PropTypes.shape({
      ...basic,
      name: PropTypes.string,
      description: PropTypes.string,
      screenCode: PropTypes.string,
      color: PropTypes.string,
      width: PropTypes.Number,
      height: PropTypes.Number,
    }),
    locations: PropTypes.shape({
      ...basic,
      name: PropTypes.string,
      description: PropTypes.string,
    }),
    userGroups: PropTypes.shape({
      ...basic,
      name: PropTypes.string,
      description: PropTypes.string,
      users: PropTypes.arrayOf(PropTypes.string),
      displays: PropTypes.arrayOf(PropTypes.string),
      devices: PropTypes.arrayOf(PropTypes.string),
      images: PropTypes.arrayOf(PropTypes.string),
      groups: PropTypes.arrayOf(PropTypes.string),
    }),
    gateways: PropTypes.shape({
      ...basic,
      name: PropTypes.string,
      description: PropTypes.string,
      ip: PropTypes.string,
      mac: PropTypes.string,
      port: PropTypes.number,
      sync: PropTypes.string,
    }),
    devices: PropTypes.shape({
      ...basic,
      name: PropTypes.string,
      description: PropTypes.string,
      found: PropTypes.bool,
      initcode: PropTypes.string,
      lastFound: PropTypes.string,
      mac: PropTypes.string,
      rssi: PropTypes.string,
      screen: PropTypes.string,
      userGroup: PropTypes.string,
      gateway: PropTypes.shape({
        ...basic,
        name: PropTypes.string,
        description: PropTypes.string,
        location: PropTypes.string,
        mac: PropTypes.string,
      }),
    }),
    displays: PropTypes.shape({
      ...basic,
      name: PropTypes.string,
      description: PropTypes.string,
      timeline: PropTypes.string,
      lastUpdateResult: PropTypes.bool,
      userGroup: PropTypes.string,
      device: PropTypes.string,
      updating: PropTypes.bool,
      tags: PropTypes.arrayOf(PropTypes.string),
      activeImage: PropTypes.shape({
        ...basic,
        src: PropTypes.string,
      }),
    }),
    images: PropTypes.shape({
      ...basic,
      name: PropTypes.string,
      description: PropTypes.string,
      userGroup: PropTypes.string,
      tags: PropTypes.arrayOf(PropTypes.string),
    }),
    groups: PropTypes.shape({
      ...basic,
      name: PropTypes.string,
      description: PropTypes.string,
      userGroup: PropTypes.string,
      tags: PropTypes.arrayOf(PropTypes.string),
    }),
  }),
  users: PropTypes.shape({
    ...basic,
    admin: PropTypes.bool,
    name: PropTypes.string,
    email: PropTypes.string,
    login: PropTypes.string,
    userGroup: PropTypes.shape({
      ...basic,
      name: PropTypes.string,
      description: PropTypes.string,
    }),
  }),
  user: PropTypes.shape({
    ...basic,
    admin: PropTypes.bool,
    name: PropTypes.string,
  }),
  screens: PropTypes.shape({
    ...basic,
    name: PropTypes.string,
    description: PropTypes.string,
    screenCode: PropTypes.string,
    color: PropTypes.string,
    width: PropTypes.Number,
    height: PropTypes.Number,
  }),
  locations: PropTypes.shape({
    ...basic,
    name: PropTypes.string,
    description: PropTypes.string,
  }),
  userGroups: PropTypes.shape({
    ...basic,
    name: PropTypes.string,
    description: PropTypes.string,
    users: PropTypes.arrayOf(PropTypes.string),
    displays: PropTypes.arrayOf(PropTypes.string),
    devices: PropTypes.arrayOf(PropTypes.string),
    images: PropTypes.arrayOf(PropTypes.string),
    groups: PropTypes.arrayOf(PropTypes.string),
  }),
  gateways: PropTypes.shape({
    ...basic,
    name: PropTypes.string,
    description: PropTypes.string,
    ip: PropTypes.string,
    mac: PropTypes.string,
    port: PropTypes.number,
    sync: PropTypes.string,
  }),
  device: PropTypes.shape({
    ...basic,
    name: PropTypes.string,
    description: PropTypes.string,
    found: PropTypes.bool,
    initcode: PropTypes.string,
    lastFound: PropTypes.string,
    mac: PropTypes.string,
    rssi: PropTypes.string,
    batt: PropTypes.string,
    screen: PropTypes.string,
    userGroup: PropTypes.shape({
      ...basic,
      name: PropTypes.string,
      description: PropTypes.string,
    }),
    updatedBy: PropTypes.shape({
      ...basic,
      name: PropTypes.string,
      userGroup: PropTypes.string,
    }),
    display: PropTypes.shape({
      ...basic,
      name: PropTypes.string,
      description: PropTypes.string,
      userGroup: PropTypes.string,
    }),
    gateway: PropTypes.shape({
      ...basic,
      name: PropTypes.string,
      description: PropTypes.string,
      location: PropTypes.string,
      mac: PropTypes.string,
    }),

  }),
  devices: PropTypes.shape({
    ...basic,
    name: PropTypes.string,
    description: PropTypes.string,
    found: PropTypes.bool,
    initcode: PropTypes.string,
    lastFound: PropTypes.string,
    mac: PropTypes.string,
    rssi: PropTypes.string,
    screen: PropTypes.string,
    userGroup: PropTypes.string,
    gateway: PropTypes.shape({
      ...basic,
      name: PropTypes.string,
      description: PropTypes.string,
      location: PropTypes.string,
      mac: PropTypes.string,
    }),
  }),
  displays: PropTypes.shape({
    ...basic,
    name: PropTypes.string,
    description: PropTypes.string,
    timeline: PropTypes.string,
    lastUpdateResult: PropTypes.bool,
    userGroup: PropTypes.string,
    device: PropTypes.string,
    updating: PropTypes.bool,
    tags: PropTypes.arrayOf(PropTypes.string),
    activeImage: PropTypes.shape({
      ...basic,
      src: PropTypes.string,
    }),
  }),
  images: PropTypes.shape({
    ...basic,
    name: PropTypes.string,
    description: PropTypes.string,
    userGroup: PropTypes.string,
    tags: PropTypes.arrayOf(PropTypes.string),
  }),
  groups: PropTypes.shape({
    ...basic,
    name: PropTypes.string,
    description: PropTypes.string,
    userGroup: PropTypes.string,
    tags: PropTypes.arrayOf(PropTypes.string),
  }),
  events: PropTypes.shape({
    ...basic,
    name: PropTypes.string,
    enabled: PropTypes.bool,
    description: PropTypes.string,
    userGroup: PropTypes.string, 
    type: PropTypes.string,
    displays: PropTypes.arrayOf(PropTypes.shape({
        ...basic,
        name: PropTypes.string,
        description: PropTypes.string,
        found: PropTypes.bool,
        initcode: PropTypes.string,
        lastFound: PropTypes.string,
        mac: PropTypes.string,
        rssi: PropTypes.string,
        batt: PropTypes.string,
        screen: PropTypes.string,
        userGroup: PropTypes.shape({
          ...basic,
          name: PropTypes.string,
          description: PropTypes.string,
        }),
        updatedBy: PropTypes.shape({
          ...basic,
          name: PropTypes.string,
          userGroup: PropTypes.string,
        }),
        display: PropTypes.shape({
          ...basic,
          name: PropTypes.string,
          description: PropTypes.string,
          userGroup: PropTypes.string,
        }),
        gateway: PropTypes.shape({
          ...basic,
          name: PropTypes.string,
          description: PropTypes.string,
          location: PropTypes.string,
          mac: PropTypes.string,
        })
       })
       ),
  })
};

export const notifications = {
  image: {
    post: 'Imagen configurada con éxito',
    put: 'Imagen actualizada con éxito',
    delete: 'Imagen eliminada con éxito',
  },
  display: {
    post: 'Display configurado con éxito',
    put: 'Display actualizado con éxito',
    delete: 'Display eliminado con éxito',
  },
  post: {
    icon: 'upload',
  },
};
